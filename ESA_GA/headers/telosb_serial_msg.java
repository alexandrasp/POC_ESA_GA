/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'telosb_serial_msg'
 * message type.
 */

package blah.foo;

public class telosb_serial_msg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 24;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 101;

    /** Create a new telosb_serial_msg of size 24. */
    public telosb_serial_msg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new telosb_serial_msg of the given data_length. */
    public telosb_serial_msg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new telosb_serial_msg with the given data_length
     * and base offset.
     */
    public telosb_serial_msg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new telosb_serial_msg using the given byte array
     * as backing store.
     */
    public telosb_serial_msg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new telosb_serial_msg using the given byte array
     * as backing store, with the given base offset.
     */
    public telosb_serial_msg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new telosb_serial_msg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public telosb_serial_msg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new telosb_serial_msg embedded in the given message
     * at the given base offset.
     */
    public telosb_serial_msg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new telosb_serial_msg embedded in the given message
     * at the given base offset and length.
     */
    public telosb_serial_msg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <telosb_serial_msg> \n";
      try {
        s += "  [raw_voltage="+Float.toString(get_raw_voltage())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [raw_temperature="+Float.toString(get_raw_temperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [r_msg_number=0x"+Long.toHexString(get_r_msg_number())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [r_node_ID=0x"+Long.toHexString(get_r_node_ID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [converted_voltage="+Float.toString(get_converted_voltage())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [converted_temperature="+Float.toString(get_converted_temperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msg_number=0x"+Long.toHexString(get_msg_number())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [node_ID=0x"+Long.toHexString(get_node_ID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: raw_voltage
    //   Field type: float, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'raw_voltage' is signed (false).
     */
    public static boolean isSigned_raw_voltage() {
        return false;
    }

    /**
     * Return whether the field 'raw_voltage' is an array (false).
     */
    public static boolean isArray_raw_voltage() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'raw_voltage'
     */
    public static int offset_raw_voltage() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'raw_voltage'
     */
    public static int offsetBits_raw_voltage() {
        return 0;
    }

    /**
     * Return the value (as a float) of the field 'raw_voltage'
     */
    public float get_raw_voltage() {
        return (float)getFloatElement(offsetBits_raw_voltage(), 32);
    }

    /**
     * Set the value of the field 'raw_voltage'
     */
    public void set_raw_voltage(float value) {
        setFloatElement(offsetBits_raw_voltage(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'raw_voltage'
     */
    public static int size_raw_voltage() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'raw_voltage'
     */
    public static int sizeBits_raw_voltage() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: raw_temperature
    //   Field type: float, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'raw_temperature' is signed (false).
     */
    public static boolean isSigned_raw_temperature() {
        return false;
    }

    /**
     * Return whether the field 'raw_temperature' is an array (false).
     */
    public static boolean isArray_raw_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'raw_temperature'
     */
    public static int offset_raw_temperature() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'raw_temperature'
     */
    public static int offsetBits_raw_temperature() {
        return 32;
    }

    /**
     * Return the value (as a float) of the field 'raw_temperature'
     */
    public float get_raw_temperature() {
        return (float)getFloatElement(offsetBits_raw_temperature(), 32);
    }

    /**
     * Set the value of the field 'raw_temperature'
     */
    public void set_raw_temperature(float value) {
        setFloatElement(offsetBits_raw_temperature(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'raw_temperature'
     */
    public static int size_raw_temperature() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'raw_temperature'
     */
    public static int sizeBits_raw_temperature() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: r_msg_number
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'r_msg_number' is signed (false).
     */
    public static boolean isSigned_r_msg_number() {
        return false;
    }

    /**
     * Return whether the field 'r_msg_number' is an array (false).
     */
    public static boolean isArray_r_msg_number() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'r_msg_number'
     */
    public static int offset_r_msg_number() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'r_msg_number'
     */
    public static int offsetBits_r_msg_number() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'r_msg_number'
     */
    public int get_r_msg_number() {
        return (int)getUIntBEElement(offsetBits_r_msg_number(), 16);
    }

    /**
     * Set the value of the field 'r_msg_number'
     */
    public void set_r_msg_number(int value) {
        setUIntBEElement(offsetBits_r_msg_number(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'r_msg_number'
     */
    public static int size_r_msg_number() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'r_msg_number'
     */
    public static int sizeBits_r_msg_number() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: r_node_ID
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'r_node_ID' is signed (false).
     */
    public static boolean isSigned_r_node_ID() {
        return false;
    }

    /**
     * Return whether the field 'r_node_ID' is an array (false).
     */
    public static boolean isArray_r_node_ID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'r_node_ID'
     */
    public static int offset_r_node_ID() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'r_node_ID'
     */
    public static int offsetBits_r_node_ID() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'r_node_ID'
     */
    public int get_r_node_ID() {
        return (int)getUIntBEElement(offsetBits_r_node_ID(), 16);
    }

    /**
     * Set the value of the field 'r_node_ID'
     */
    public void set_r_node_ID(int value) {
        setUIntBEElement(offsetBits_r_node_ID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'r_node_ID'
     */
    public static int size_r_node_ID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'r_node_ID'
     */
    public static int sizeBits_r_node_ID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: converted_voltage
    //   Field type: float, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'converted_voltage' is signed (false).
     */
    public static boolean isSigned_converted_voltage() {
        return false;
    }

    /**
     * Return whether the field 'converted_voltage' is an array (false).
     */
    public static boolean isArray_converted_voltage() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'converted_voltage'
     */
    public static int offset_converted_voltage() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'converted_voltage'
     */
    public static int offsetBits_converted_voltage() {
        return 96;
    }

    /**
     * Return the value (as a float) of the field 'converted_voltage'
     */
    public float get_converted_voltage() {
        return (float)getFloatElement(offsetBits_converted_voltage(), 32);
    }

    /**
     * Set the value of the field 'converted_voltage'
     */
    public void set_converted_voltage(float value) {
        setFloatElement(offsetBits_converted_voltage(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'converted_voltage'
     */
    public static int size_converted_voltage() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'converted_voltage'
     */
    public static int sizeBits_converted_voltage() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: converted_temperature
    //   Field type: float, unsigned
    //   Offset (bits): 128
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'converted_temperature' is signed (false).
     */
    public static boolean isSigned_converted_temperature() {
        return false;
    }

    /**
     * Return whether the field 'converted_temperature' is an array (false).
     */
    public static boolean isArray_converted_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'converted_temperature'
     */
    public static int offset_converted_temperature() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'converted_temperature'
     */
    public static int offsetBits_converted_temperature() {
        return 128;
    }

    /**
     * Return the value (as a float) of the field 'converted_temperature'
     */
    public float get_converted_temperature() {
        return (float)getFloatElement(offsetBits_converted_temperature(), 32);
    }

    /**
     * Set the value of the field 'converted_temperature'
     */
    public void set_converted_temperature(float value) {
        setFloatElement(offsetBits_converted_temperature(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'converted_temperature'
     */
    public static int size_converted_temperature() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'converted_temperature'
     */
    public static int sizeBits_converted_temperature() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msg_number
    //   Field type: int, unsigned
    //   Offset (bits): 160
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msg_number' is signed (false).
     */
    public static boolean isSigned_msg_number() {
        return false;
    }

    /**
     * Return whether the field 'msg_number' is an array (false).
     */
    public static boolean isArray_msg_number() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msg_number'
     */
    public static int offset_msg_number() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msg_number'
     */
    public static int offsetBits_msg_number() {
        return 160;
    }

    /**
     * Return the value (as a int) of the field 'msg_number'
     */
    public int get_msg_number() {
        return (int)getUIntBEElement(offsetBits_msg_number(), 16);
    }

    /**
     * Set the value of the field 'msg_number'
     */
    public void set_msg_number(int value) {
        setUIntBEElement(offsetBits_msg_number(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'msg_number'
     */
    public static int size_msg_number() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msg_number'
     */
    public static int sizeBits_msg_number() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: node_ID
    //   Field type: int, unsigned
    //   Offset (bits): 176
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'node_ID' is signed (false).
     */
    public static boolean isSigned_node_ID() {
        return false;
    }

    /**
     * Return whether the field 'node_ID' is an array (false).
     */
    public static boolean isArray_node_ID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'node_ID'
     */
    public static int offset_node_ID() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'node_ID'
     */
    public static int offsetBits_node_ID() {
        return 176;
    }

    /**
     * Return the value (as a int) of the field 'node_ID'
     */
    public int get_node_ID() {
        return (int)getUIntBEElement(offsetBits_node_ID(), 16);
    }

    /**
     * Set the value of the field 'node_ID'
     */
    public void set_node_ID(int value) {
        setUIntBEElement(offsetBits_node_ID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'node_ID'
     */
    public static int size_node_ID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'node_ID'
     */
    public static int sizeBits_node_ID() {
        return 16;
    }

}
